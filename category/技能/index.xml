<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技能 | Wei Li|李伟</title>
    <link>/category/%E6%8A%80%E8%83%BD/</link>
      <atom:link href="/category/%E6%8A%80%E8%83%BD/index.xml" rel="self" type="application/rss+xml" />
    <description>技能</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Wei Li ©2024 </copyright><lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu1ced7b333353f5a008e2ad419da4d284_46376_512x512_fill_lanczos_center_2.png</url>
      <title>技能</title>
      <link>/category/%E6%8A%80%E8%83%BD/</link>
    </image>
    
    <item>
      <title>my first R package——ggwheat</title>
      <link>/post/my-first-r-package-ggwheat/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/my-first-r-package-ggwheat/</guid>
      <description>&lt;p&gt;关于这个R包，早期也写过一篇介绍的文章，推送在小麦研究联盟的公众号上（&lt;a href=&#34;https://mp.weixin.qq.com/s/N8dmPifnM_0Xhpcjcjmn_A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一千零一技 | 我用R画了一株小麦&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当时仅仅是在我的电脑上实现了一个小麦植株器官的可视化功能。后来，有很多人对这个功能感兴趣。于是将这个功能写成R包的计划就提上日程。&lt;/p&gt;
&lt;p&gt;在介绍这个R包的功能之前，先简单回顾一下整个创作工程。&lt;/p&gt;
&lt;p&gt;我将其分为3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;素材准备与制作&lt;/li&gt;
&lt;li&gt;数据融合与功能优化&lt;/li&gt;
&lt;li&gt;R包开发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面将逐一介绍各个步骤&lt;/p&gt;
&lt;h3 id=&#34;1-素材准备与制作&#34;&gt;1. 素材准备与制作&lt;/h3&gt;
&lt;p&gt;这个步骤应该是最难的，我觉得。&lt;/p&gt;
&lt;p&gt;最初有这个想法，是和本实验室的一本博士生讨论的时候萌生的。当时我们都觉的有必要用一种更简单和直观的方式展示数据。然而苦于没有合适的素材和展示方式，当时就将此事搁浅了。&lt;/p&gt;
&lt;p&gt;后来，一次偶然的机会。在搜集素材时找到一个小麦植株的矢量图。当时的素材时这个样子。
&lt;img src=&#34;src_selected.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到这张图的时候，我们一致认为，这就是要找的素材。&lt;/p&gt;
&lt;p&gt;找到素材之后，接下来就该考虑怎么使用了。&lt;/p&gt;
&lt;p&gt;我们的想法很简单，找一株最具有代表性的小麦植株，用来展示小麦各器官的。相对来说比较完整的，应该是开花到灌浆期间。这个期间整个植株的发育已经完成，而且穗也比较完全。所以最终选择了灌浆期的这株小麦素材。&lt;/p&gt;
&lt;p&gt;选好以后，我们就将素材直接放到PPT中做了试验。由于素材各器官是分开的，在PPT中作为形状独立存在。因此，不同器官的化学成分含量可以用该器官形状的颜色的展示。初步的效果如下图。
&lt;img src=&#34;wheat_plant_ver1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，当我们耗时一个多小时将上面的图画完的时候，我们觉得如果小麦植株绘图如果以后要这样用的话，就太麻烦了。每次都需要手动注入数据信息，而且这个过程全凭感觉。&lt;/p&gt;
&lt;p&gt;这个时候，我想到了R。作为一款专业绘图的统计软件，R在可视化方面有着十分强大的功能。&lt;/p&gt;
&lt;p&gt;我们案例中，展示植株的形状，和地图的多边形有诸多相似之处。R语言中恰好有一款展示地图数据的R包&lt;code&gt;sf&lt;/code&gt;。这个R包不仅有展示地图的功能，还能自己制作地图。而地图制作中的其中一个元素，多边形，正是和我们做的小麦植株轮廓相似。&lt;/p&gt;
&lt;p&gt;于是接下来转战到用R包&lt;code&gt;sf&lt;/code&gt;进行小麦植株器官可视化。&lt;/p&gt;
&lt;p&gt;首选需要根据素材，制作出来小麦植株各器官的多边形轮廓。这个步骤在公众号文章（&lt;a href=&#34;https://mp.weixin.qq.com/s/N8dmPifnM_0Xhpcjcjmn_A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一千零一技 | 我用R画了一株小麦&lt;/a&gt;）有详细介绍，在此不再赘述。
&lt;img src=&#34;plotwehatinR.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;将图形组合成完整的植株，就可以在R里面就行操作了。&lt;/p&gt;
&lt;h3 id=&#34;2-数据融合与基础功能开发&#34;&gt;2. 数据融合与基础功能开发&lt;/h3&gt;
&lt;p&gt;先来看下例子。这个例子中，使用随机数为小麦植株9中器官做了赋值。通过图中颜色可以明显辨别不同器官的数值差异。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &#39;ggplot2&#39; was built under R version 4.4.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加数据标签功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而，仅仅通过颜色的变化好像还不足以展示出器官间的不同。尤其是当某几个器官数据差异不大导致颜色无法分辨时。就有必要用具体的数据加以区分了。我们通过对每个器官添加标签的方式来实现。提前在器官上选取坐标作为标签在器官的位置。为了使显示的数值标签不遮挡，采用R包&lt;code&gt;ggrepel&lt;/code&gt;进行标签展示。具体结果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加不同调色板&lt;/strong&gt;
最初做颜色展示的时候，只考虑用颜色变异大的色彩。spectral色板成为了首选。当时当成品出来的时候，发现并不是那么好看。于是又挑选了其他几种色板，可以根据需要自行选择。比如，我要展示的氮含量的数据。这个数据植株绿色相关，我希望颜色越绿，表示的氮含量越高。而又希望对比色略微有些差异。那我就可以用YlGn色板。也就是图中第四个展示的。
&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;展示时间尺度的变化&lt;/strong&gt;
上面讲到的仅仅是单株小麦在器官之间的空间变化。而我们实际试验过程中不仅仅取一次样品。如果多次取样，如何展示其时间变化呢。&lt;/p&gt;
&lt;p&gt;ggplot中的分面功能很好的解决了这个问题。下面这张图就是展示时空变化的小麦植株氮浓度(同头图)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;1632&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任意组合不同时间下的植株&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;展示开花期和成熟期的济麦22与农大399两个小麦品种，并且加上数值标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;
以上是品种济麦22&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;
以上是品种农大399&lt;/p&gt;
&lt;h3 id=&#34;3-开发r包&#34;&gt;3. 开发R包&lt;/h3&gt;
&lt;p&gt;有了以上的实施思想和实现过程，剩下的就是用R包开发的软件将这些函数打包。统计之都网站有一篇博客介绍了&lt;a href=&#34;https://cosx.org/2013/11/building-r-packages-easily&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R包的建立方法&lt;/a&gt;。另外，也有一些开发R包的工具，包括&lt;code&gt;pkgdown&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;R包开发的过程就是将各种函数写入打包调试的过程。
&lt;img src=&#34;R_pkg_dev.jpg&#34; alt=&#34;&#34;&gt;
目前已经创建好R包开发的项目，接下来就根据前面实现的功能将其转换成函数写入到R包中。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>手把手教你安装R</title>
      <link>/post/get-your-hands-dirty-install-r-from-the-begining/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/get-your-hands-dirty-install-r-from-the-begining/</guid>
      <description>&lt;p&gt;写在前面：在正式安装R之前需要做下准备工作，下载原生的R软件以及最好用的R操作界面Rstudio。&lt;/p&gt;
&lt;p&gt;链接地址：&lt;/p&gt;
&lt;p&gt;R &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rstudio &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34;&gt;https://www.rstudio.com/products/rstudio/download/#download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新手在安装R时常常会犯一些错误，导致后期在使用和升级R时体验极为不佳。我这个安装教程是总结了多次安装实战经验之后写下的，希望对想学R但又无从下手的同学能有所帮助。
另外，安装过程详细的避坑指南，可以参考谢益辉写的&lt;a href=&#34;https://bookdown.org/yihui/r-ninja/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言忍者秘笈&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面进入正式的安装教程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装原生R (R-4.0.5-win.exe)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;安装时要注意一定一定一定要选择English版本&lt;/li&gt;
&lt;li&gt;安装目录去掉版本号(C:\Program Files\R)&lt;/li&gt;
&lt;li&gt;安装选项仅勾选Core files 和 64-bit files即可&lt;/li&gt;
&lt;li&gt;其他配置都按照默认即可&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装Rstudio (默认安装)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;千万注意顺序，安装原生R之后，再Rstudio&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;打开并配置Rstudio，包括字体大小和package的镜像（亲测兰州大学镜像好用）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字体配置Tools/Global Options/Appearance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package镜像配置Tools/Global Options/Packages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;用户目录的设置（参考R语言忍者秘籍），具体方式如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;normalizePath(&#39;~&#39;) # 查看用户目录
# 如果文件不存在，它会被自动创建
file.edit(&#39;~/.Renviron&#39;)
# 写入配置文件中，保存，重启R
R_LIBS_USER=&amp;quot;~/R/libs&amp;quot; # C盘C:\Users\Wei\Documents\R\libs
R_LIBS_USER=&amp;quot;D:/Rlibs&amp;quot; # 可以设置成自己喜欢的位置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之所以要单独设置一个lib path，是为了方便升级时迁移已经安装的R包。因为后期安装的R包都会优先存储到新配置的目录下。一方面更新R包的时候不需要重新安装，只需将Rlib目录下的R包文件拷贝出来即可；另一方面，附加R包与主程序包是分开的，极大的方便的包的管理。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;检测libPaths位置是否配置成功&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;.libPaths()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入以上代码，如显示如下内容，表示配置成功。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1] &amp;ldquo;D:/Rlibs&amp;rdquo;    &amp;ldquo;C:/Program Files/R/library&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如不成功，则需重启电脑后查看是否配置生效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐R图库，有相关的图和代码
&lt;a href=&#34;https://www.r-graph-gallery.com/index.html&#34;&gt;https://www.r-graph-gallery.com/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Color variations between and within wheat plant</title>
      <link>/post/color-variations-between-and-within-wheat-plant/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/post/color-variations-between-and-within-wheat-plant/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;NC-variation_spatial-and-temperal.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;前几天，在微信公众号里看到有个R包（gganatogram) 可以画动物和植物的图形，但是里面的小麦不好看。于是把我用R画的小麦分享出来，比一比哪个更好看😜。&lt;/p&gt;
&lt;p&gt;话不多说，先上图。
&lt;img src=&#34;img1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;先说说为什么要画这么一个图。&lt;/p&gt;
&lt;p&gt;那是在我刚进课题组的时候，就了解到实验室有大量小麦的数据。而且是从叶片到茎秆再到穗和籽粒等等各种器官一应俱全。更让人惊喜的是这些数据时间跨度大。当时我就在想，用什么样的方式才能展示出来这么丰富的空间和时间变化呢？&lt;/p&gt;
&lt;p&gt;一次偶然的机会，我联想到地图，地图里面的各个区域由多边形组成，区域的数值变化可以通过填色来完成。眼尖的同学应该看出来了，里面正是我华北平原的吴桥实验站（手动笑脸）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;而我们一株小麦上的各个器官正好对应着地图上不同区域。利用小麦不同器官的轮廓图，勾勒出多边形，再把多边形组合，就形成一株完整的小麦。&lt;/p&gt;
&lt;p&gt;有了这个想法之后，我就开始实施。首先从网上找到一株小麦的矢量图（就是各器官能分开的图形），然后根据各部分的轮廓创建多边形。是的，图形数据化用到了一款开源软件，名为&lt;a href=&#34;https://automeris.io/WebPlotDigitizer/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebPlotDigitizer&lt;/a&gt;。这款软件非常强大，可以提取图像或者图片中的坐标数据。这里特别提一句，小麦植株的比例做了一些微调，可能与真实的有点出入，但是不影响数据展示。还有一点，我们课题组专门研究地上部分的，暂时还没把根(器官)加进去，不过后期会考虑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;多边形创建采用了专门处理gis数据的R包sf。&lt;/p&gt;
&lt;p&gt;最后的成品就是前面看到的这个样子了。每一个部分都可以根据自己的需求填上任意的颜色。而且颜色也可以根据需求自己选择，颜色的深浅代表指标的高低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/color-variations-between-and-within-wheat-plant/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
也可以给每个部分添加标签，放上对应的数据。这样看起来好是不是好很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/color-variations-between-and-within-wheat-plant/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再来一张动图看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mygif.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后公布一下gganotom R包里面的小麦。看起来也还行 😄&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;wheatbygganotom.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visualize my spectra</title>
      <link>/post/visualize-my-spectra/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualize-my-spectra/</guid>
      <description>&lt;p&gt;从去年开始就一直在分析光谱的数据，刚开始以为R里面会有包能解决我关于光谱的所有问题。经过一段时间的试错之后，我发现自己错了。&lt;/p&gt;
&lt;p&gt;于是记录下来我自己实践的过程。&lt;/p&gt;
&lt;h3 id=&#34;批量读取光谱数据&#34;&gt;批量读取光谱数据&lt;/h3&gt;
&lt;p&gt;一般来说，拿到的原始光谱数据数据有这样的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;光谱反射率和光谱吸收值夹杂在文件内部。&lt;/strong&gt; 以SR3501的数据为例，打开之后是这样的(如下图所示)。文件内部有很多关于仪器和配置的信息。真正对我们有价值的数据在27行以后。具体的就是此处的两列数据，第一列为波长，第二列为对应的反射率。所以这就要求读取数据的时候找到指定的行。
&lt;img src=&#34;sedfile_snapshot.jpg&#34; alt=&#34;SR3501sedfile&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.&lt;strong&gt;数据文件不止一个，常常需要批量读取。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是经过多次试错与总结，写下了下面的方法批量读取指定行的光谱数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &#39;&#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,
                     stringsAsFactors = F,row.names = 1)
  spec.t &amp;lt;- as.data.frame(t(spec))
  spec.bdf &amp;lt;- rbind(spec.bdf, spec.t)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据需求，有时候要对数据做一下转置。转置后再把所有的数据bind到一起。&lt;/p&gt;
&lt;p&gt;采用&lt;code&gt;ggplot2&lt;/code&gt;绘图，需要的是长数据，原来两列的数据正好符合要求，只需要添加一列信息即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &#39;&#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,stringsAsFactors = F)
  colnames(spec) &amp;lt;- c(&amp;quot;Wavelengths&amp;quot;,&amp;quot;Reflectance&amp;quot;)
  spec$unique_id &amp;lt;- basename(flp)
  spec.df &amp;lt;- rbind(spec.df, spec)
  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了数据就可以展示了，下面是选出来100条光谱进行的展示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)
library(cowplot)
load(file = &amp;quot;D:/blogdown/sourceRda/show spectra.rda&amp;quot;)
# Define nice breaks for x axis
brk  &amp;lt;- pretty(as.numeric(unique(spec$Wavelengths)), n = 10)
spec.df$grp &amp;lt;- &amp;quot;A&amp;quot;

ggplot(spec.df, aes(Wavelengths, Reflectance,group = unique_id)) +
  geom_line(aes(color = grp),alpha = 0.7, size = 0.6) +
  scale_x_continuous(breaks = brk) +
  theme_cowplot() +
  scale_color_manual(values = &amp;quot;black&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;) # remove the legend
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/visualize-my-spectra/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了好看，我们还可以给每条光谱加上颜色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/visualize-my-spectra/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;后续更多有意思的分析且听下回分解&#34;&gt;后续更多有意思的分析，且听下回分解&lt;/h3&gt;
&lt;p&gt;先附上几张图，再留着以后慢慢讲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如何优雅的展示不同类别的光谱&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;spectra_organ_separate.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;光谱定量分析与主成分分析&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;Spectra_and_PCA.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主成分分析用于分组分类&lt;/strong&gt;
&lt;img src=&#34;spectra_PCA.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
