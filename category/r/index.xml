<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Wei Li|李伟</title>
    <link>/category/r/</link>
      <atom:link href="/category/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>Wei Li ©2021 </copyright><lastBuildDate>Tue, 28 Sep 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu8fa43e4483d02e4bfdf294b3386ef244_148313_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/category/r/</link>
    </image>
    
    <item>
      <title>My first R package--ggwheat</title>
      <link>/post/my-first-r-package-ggwheat/</link>
      <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/my-first-r-package-ggwheat/</guid>
      <description>
&lt;script src=&#34;/post/my-first-r-package-ggwheat/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;关于这个R包，早期也写过一篇介绍的文章，推送在小麦研究联盟的公众号上（&lt;a href=&#34;https://mp.weixin.qq.com/s/N8dmPifnM_0Xhpcjcjmn_A&#34;&gt;一千零一技 | 我用R画了一株小麦&lt;/a&gt;）。&lt;/p&gt;
&lt;p&gt;当时仅仅是在我的电脑上实现了一个小麦植株器官的可视化功能。后来，有很多人对这个功能感兴趣。于是将这个功能写成R包的计划就提上日程。&lt;/p&gt;
&lt;p&gt;在介绍这个R包的功能之前，先简单回顾一下整个创作工程。&lt;/p&gt;
&lt;p&gt;我将其分为3个步骤：&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;素材准备与制作&lt;/li&gt;
&lt;li&gt;数据融合与功能优化&lt;/li&gt;
&lt;li&gt;R包开发&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面将逐一介绍各个步骤&lt;/p&gt;
&lt;div id=&#34;素材准备与制作&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;1. 素材准备与制作&lt;/h3&gt;
&lt;p&gt;这个步骤应该是最难的，我觉得。&lt;/p&gt;
&lt;p&gt;最初有这个想法，是和本实验室的一本博士生讨论的时候萌生的。当时我们都觉的有必要用一种更简单和直观的方式展示数据。然而苦于没有合适的素材和展示方式，当时就将此事搁浅了。&lt;/p&gt;
&lt;p&gt;后来，一次偶然的机会。在搜集素材时找到一个小麦植株的矢量图。当时的素材时这个样子。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/src_selected.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;看到这张图的时候，我们一致认为，这就是要找的素材。&lt;/p&gt;
&lt;p&gt;找到素材之后，接下来就该考虑怎么使用了。&lt;/p&gt;
&lt;p&gt;我们的想法很简单，找一株最具有代表性的小麦植株，用来展示小麦各器官的。相对来说比较完整的，应该是开花到灌浆期间。这个期间整个植株的发育已经完成，而且穗也比较完全。所以最终选择了灌浆期的这株小麦素材。&lt;/p&gt;
&lt;p&gt;选好以后，我们就将素材直接放到PPT中做了试验。由于素材各器官是分开的，在PPT中作为形状独立存在。因此，不同器官的化学成分含量可以用该器官形状的颜色的展示。初步的效果如下图。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/wheat_plant_ver1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然而，当我们耗时一个多小时将上面的图画完的时候，我们觉得如果小麦植株绘图如果以后要这样用的话，就太麻烦了。每次都需要手动注入数据信息，而且这个过程全凭感觉。&lt;/p&gt;
&lt;p&gt;这个时候，我想到了R。作为一款专业绘图的统计软件，R在可视化方面有着十分强大的功能。&lt;/p&gt;
&lt;p&gt;我们案例中，展示植株的形状，和地图的多边形有诸多相似之处。R语言中恰好有一款展示地图数据的R包&lt;code&gt;sf&lt;/code&gt;。这个R包不仅有展示地图的功能，还能自己制作地图。而地图制作中的其中一个元素，多边形，正是和我们做的小麦植株轮廓相似。&lt;/p&gt;
&lt;p&gt;于是接下来转战到用R包&lt;code&gt;sf&lt;/code&gt;进行小麦植株器官可视化。&lt;/p&gt;
&lt;p&gt;首选需要根据素材，制作出来小麦植株各器官的多边形轮廓。这个步骤在公众号文章（&lt;a href=&#34;https://mp.weixin.qq.com/s/N8dmPifnM_0Xhpcjcjmn_A&#34;&gt;一千零一技 | 我用R画了一株小麦&lt;/a&gt;）有详细介绍，在此不再赘述。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/plotwehatinR.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将图形组合成完整的植株，就可以在R里面就行操作了。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;数据融合与基础功能开发&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;2. 数据融合与基础功能开发&lt;/h3&gt;
&lt;p&gt;先来看下例子。这个例子中，使用随机数为小麦植株9中器官做了赋值。通过图中颜色可以明显辨别不同器官的数值差异。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
&lt;strong&gt;添加数据标签功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而，仅仅通过颜色的变化好像还不足以展示出器官间的不同。尤其是当某几个器官数据差异不大导致颜色无法分辨时。就有必要用具体的数据加以区分了。我们通过对每个器官添加标签的方式来实现。提前在器官上选取坐标作为标签在器官的位置。为了使显示的数值标签不遮挡，采用R包&lt;code&gt;ggrepel&lt;/code&gt;进行标签展示。具体结果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;添加不同调色板&lt;/strong&gt;
最初做颜色展示的时候，只考虑用颜色变异大的色彩。spectral色板成为了首选。当时当成品出来的时候，发现并不是那么好看。于是又挑选了其他几种色板，可以根据需要自行选择。比如，我要展示的氮含量的数据。这个数据植株绿色相关，我希望颜色越绿，表示的氮含量越高。而又希望对比色略微有些差异。那我就可以用YlGn色板。也就是图中第四个展示的。
&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;展示时间尺度的变化&lt;/strong&gt;
上面讲到的仅仅是单株小麦在器官之间的空间变化。而我们实际试验过程中不仅仅取一次样品。如果多次取样，如何展示其时间变化呢。&lt;/p&gt;
&lt;p&gt;ggplot中的分面功能很好的解决了这个问题。下面这张图就是展示时空变化的小麦植株氮浓度(同头图)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;1632&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;任意组合不同时间下的植株&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;展示开花期和成熟期的济麦22与农大399两个小麦品种，并且加上数值标签。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;
以上是品种济麦22&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/my-first-r-package-ggwheat/index.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;
以上是品种农大399&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;开发r包&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;3. 开发R包&lt;/h3&gt;
&lt;p&gt;有了以上的实施思想和实现过程，剩下的就是用R包开发的软件将这些函数打包。统计之都网站有一篇博客介绍了&lt;a href=&#34;https://cosx.org/2013/11/building-r-packages-easily&#34;&gt;R包的建立方法&lt;/a&gt;。另外，也有一些开发R包的工具，包括&lt;code&gt;pkgdown&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;R包开发的过程就是将各种函数写入打包调试的过程。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/R_pkg_dev.jpg&#34; /&gt;
目前已经创建好R包开发的项目，接下来就根据前面实现的功能将其转换成函数写入到R包中。&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The key steps of protein content visualizaiton through HSI</title>
      <link>/post/the-key-steps-of-protein-content-visualizaiton-through-hsi/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      <guid>/post/the-key-steps-of-protein-content-visualizaiton-through-hsi/</guid>
      <description>
&lt;script src=&#34;/post/the-key-steps-of-protein-content-visualizaiton-through-hsi/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;如上图所示，通过成像光谱，我们可以很轻松的对小麦籽粒中的蛋白含量进行可视化。&lt;/p&gt;
&lt;div id=&#34;籽粒蛋白成像的基本步骤&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;籽粒蛋白成像的基本步骤&lt;/h4&gt;
&lt;p&gt;这一过程的实现，包含两个关键步骤：一是建立单籽粒水平的光谱预测模型；二是将模型应用的图像中，使用图像处理的方法进行可视化。&lt;/p&gt;
&lt;p&gt;光谱建模的步骤是常规操作，这里不再赘述。&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;光谱图像可视化籽粒蛋白含量&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;光谱图像可视化籽粒蛋白含量&lt;/h4&gt;
&lt;p&gt;本文重点讲一下图像处理的过程。&lt;/p&gt;
&lt;p&gt;我们都知道光谱图像（HSI）具有光谱和图像的双重特征。也就是说在光谱图像中，每一个像素都包含了一条光谱信息。而根据像素的光谱信息，再利用建立的籽粒蛋白预测模型，我们可以很容易的预测图像中每一个像素的蛋白含量。下图便是我们得到的一张像素水平的籽粒蛋白含量图。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/%E5%83%8F%E7%B4%A0%E6%B0%B4%E5%B9%B3%E8%9B%8B%E7%99%BD%E6%88%90%E5%83%8F.jpg&#34; alt=&#34;像素蛋白成像&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个图展示了两个蛋白含量不同的品种。图中虽然能大体看出两个品种的差异，然而具体到每个品种中各不同籽粒的差异，就无法分辨了。&lt;/p&gt;
&lt;p&gt;造成这样结果的原因是，图像中单个籽粒内部不同像素的光谱其实是存在较大差异的。而由于受到拍摄环境和像素位置等的影响，这些光谱的差异是不可避免的。当用这些有差异的光谱进行蛋白预测时，必然会导致籽粒内部像素级蛋白的巨大差异。为了处理这些差异，或者缩小这些差异，我们采用均值模糊的方法对图像进行处理。具体处理方法是，用临近的6个像素的平均值代表该像素，这样就能在一定程度上缩小误差。经过模糊均值处理的图像如下图所示。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/blur_pr_img.jpg&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;单籽粒籽粒蛋白含量可视化&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;单籽粒籽粒蛋白含量可视化&lt;/h4&gt;
&lt;p&gt;在育种过程中，对单籽粒的选择尤为重要。虽然室内的近红外光谱可以一定程度上实现单籽粒蛋白的测定，但是其效率不高。而成像光谱为单籽粒蛋白含量的测定提供了很好的工具。&lt;/p&gt;
&lt;p&gt;本研究得到的图像，经过图像分割处理，可以将图像中的籽粒区分开来。结合建立的模型，对每一个独立籽粒的蛋白含量就行预测，即可得到单籽粒蛋白含量图像。&lt;/p&gt;
&lt;p&gt;从图像中可以看出，大部分籽粒都与其他籽粒相互分开分开。籽粒之间的分割，首先采用了连通区域分析算法，这个算法将相互连接的像素区域打上相同的标记。根据标记可以区分出不同的分离物体（籽粒）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;labeltheseedmix.gif&#34; title=&#34;连通区域法分割籽粒&#34; /&gt;
这个动图形象的展示了该图形分割方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/Figure_labeledseeds.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然而我们发现，其中还有一些籽粒挨的比较近，无法分开。于是尝试用另外一种方法——分水岭算法进行分割。最终得到满意的分割图像，然后将每个籽粒内部对应的蛋白质（像素水平）预测含量取平均值，用颜色标签展示数值范围。就能得到最终想要的图像了。该图形可以交互展示，即鼠标放到对应的籽粒上，会在右上角显示该位置坐标和对应的籽粒蛋白含量。
&lt;img src=&#34;seedprpick.gif&#34; title=&#34;单籽粒蛋白成像交互演示&#34; /&gt;
下面图片展示了两个品种的单籽粒成像图。
由于通过图像分割对每个籽粒进行了标记，因此可以得到每一个籽粒的蛋白含量数据。利用这些数据可以做一些统计分析。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/%E5%8D%95%E7%B1%BD%E7%B2%92%E8%9B%8B%E7%99%BD%E6%88%90%E5%83%8F_chn.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/the-key-steps-of-protein-content-visualizaiton-through-hsi/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Rainfall in 2021 summer</title>
      <link>/post/rainfall-in-2021-summer/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      <guid>/post/rainfall-in-2021-summer/</guid>
      <description>
&lt;script src=&#34;/post/rainfall-in-2021-summer/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;今年2021夏天的降雨比平时多很多正好手头上有收集的降雨数据于是稍作分析展示出来&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;今年（2021）夏天的降雨比平时多很多，正好手头上有收集的降雨数据。于是稍作分析，展示出来。&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;记得往年的汛期都是7月中下旬（有历史数据为证），然而今年6月底到7月初的降雨已经接近150毫米啦！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/%E5%8C%97%E4%BA%AC%E6%B1%9B%E6%9C%9F_%E4%B8%83%E4%B8%8B%E5%85%AB%E4%B8%8A.jpg&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;下面情况今年北京的降雨情况分析&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;下面情况今年北京的降雨情况分析。&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(pre, aes(x = Datetime, y = PRE_sum)) + 
  geom_line() +
  scale_x_datetime(date_labels = &amp;quot;%b %d&amp;quot;, date_breaks = &amp;quot;3 days&amp;quot;,) +
  theme_cowplot() + mytheme +
  theme(axis.text.x = element_text(angle=45, hjust = 1)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/rainfall-in-2021-summer/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如图所见，6月初累计降雨已达近150毫米，而且最近两周降雨强度较大（如下图）。降水最多的一天发生在7月2号，单次降水量达到40毫米&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(PRE.daily, aes(x = Date, y = PRE_daily)) + geom_col() +
  scale_x_date(date_breaks = &amp;quot;2 days&amp;quot;, labels = date_format(&amp;quot;%b %d&amp;quot;)) +
  scale_y_continuous(expand = expansion()) +
  # Two weeks
  geom_point(aes(y = PRE_sum14d),size = 3) +
  geom_line(aes(y = PRE_sum14d)) +
  geom_label_repel(aes(y = PRE_sum14d,label = label14d),
                   nudge_x = 1,
                   #nudge_y = 2,
                   box.padding = unit(1.2, &amp;quot;lines&amp;quot;),
                   na.rm = TRUE) +
  theme_cowplot() +theme(axis.text.x = element_text(angle=45, hjust = 1)) +
  mytheme&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/rainfall-in-2021-summer/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>手把手教你安装R</title>
      <link>/post/get-your-hands-dirty-install-r-from-the-begining/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      <guid>/post/get-your-hands-dirty-install-r-from-the-begining/</guid>
      <description>&lt;p&gt;写在前面：在正式安装R之前需要做下准备工作，下载原生的R软件以及最好用的R操作界面Rstudio。&lt;/p&gt;
&lt;p&gt;链接地址：&lt;/p&gt;
&lt;p&gt;R &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&#34;&gt;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Rstudio &lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/#download&#34;&gt;https://www.rstudio.com/products/rstudio/download/#download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新手在安装R时常常会犯一些错误，导致后期在使用和升级R时体验极为不佳。我这个安装教程是总结了多次安装实战经验之后写下的，希望对想学R但又无从下手的同学能有所帮助。
另外，安装过程详细的避坑指南，可以参考谢益辉写的&lt;a href=&#34;https://bookdown.org/yihui/r-ninja/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;R语言忍者秘笈&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面进入正式的安装教程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装原生R (R-4.0.5-win.exe)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;安装时要注意一定一定一定要选择English版本&lt;/li&gt;
&lt;li&gt;安装目录去掉版本号(C:\Program Files\R)&lt;/li&gt;
&lt;li&gt;安装选项仅勾选Core files 和 64-bit files即可&lt;/li&gt;
&lt;li&gt;其他配置都按照默认即可&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;安装Rstudio (默认安装)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;千万注意顺序，安装原生R之后，再Rstudio&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;打开并配置Rstudio，包括字体大小和package的镜像（亲测兰州大学镜像好用）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;字体配置Tools/Global Options/Appearance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Package镜像配置Tools/Global Options/Packages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;用户目录的设置（参考R语言忍者秘籍），具体方式如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;normalizePath(&#39;~&#39;) # 查看用户目录
# 如果文件不存在，它会被自动创建
file.edit(&#39;~/.Renviron&#39;)
# 写入配置文件中，保存，重启R
R_LIBS_USER=&amp;quot;~/R/libs&amp;quot; # C盘C:\Users\Wei\Documents\R\libs
R_LIBS_USER=&amp;quot;D:/Rlibs&amp;quot; # 可以设置成自己喜欢的位置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之所以要单独设置一个lib path，是为了方便升级时迁移已经安装的R包。因为后期安装的R包都会优先存储到新配置的目录下。一方面更新R包的时候不需要重新安装，只需将Rlib目录下的R包文件拷贝出来即可；另一方面，附加R包与主程序包是分开的，极大的方便的包的管理。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;检测libPaths位置是否配置成功&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-R&#34;&gt;.libPaths()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入以上代码，如显示如下内容，表示配置成功。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1] &amp;ldquo;D:/Rlibs&amp;rdquo;    &amp;ldquo;C:/Program Files/R/library&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如不成功，则需重启电脑后查看是否配置生效。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推荐R图库，有相关的图和代码
&lt;a href=&#34;https://www.r-graph-gallery.com/index.html&#34;&gt;https://www.r-graph-gallery.com/index.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Draw wheat chart in R</title>
      <link>/post/draw-wheat-chart-in-r/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/draw-wheat-chart-in-r/</guid>
      <description>
&lt;script src=&#34;/post/draw-wheat-chart-in-r/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/NC-variation_spatial-and-temperal.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;前几天，在微信公众号里看到有个R包（gganatogram) 可以画动物和植物的图形，但是里面的小麦不好看。于是把我用R画的小麦分享出来，比一比哪个更好看😜。&lt;/p&gt;
&lt;p&gt;话不多说，先上图。
&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;先说说为什么要画这么一个图。&lt;/p&gt;
&lt;p&gt;那是在我刚进课题组的时候，就了解到实验室有大量小麦的数据。而且是从叶片到茎秆再到穗和籽粒等等各种器官一应俱全。更让人惊喜的是这些数据时间跨度大。当时我就在想，用什么样的方式才能展示出来这么丰富的空间和时间变化呢？&lt;/p&gt;
&lt;p&gt;一次偶然的机会，我联想到地图，地图里面的各个区域由多边形组成，区域的数值变化可以通过填色来完成。眼尖的同学应该看出来了，里面正是我华北平原的吴桥实验站（手动笑脸）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img2.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;而我们一株小麦上的各个器官正好对应着地图上不同区域。利用小麦不同器官的轮廓图，勾勒出多边形，再把多边形组合，就形成一株完整的小麦。&lt;/p&gt;
&lt;p&gt;有了这个想法之后，我就开始实施。首先从网上找到一株小麦的矢量图（就是各器官能分开的图形），然后根据各部分的轮廓创建多边形。是的，图形数据化用到了一款开源软件，名为&lt;a href=&#34;https://automeris.io/WebPlotDigitizer/&#34;&gt;WebPlotDigitizer&lt;/a&gt;。这款软件非常强大，可以提取图像或者图片中的坐标数据。这里特别提一句，小麦植株的比例做了一些微调，可能与真实的有点出入，但是不影响数据展示。还有一点，我们课题组专门研究地上部分的，暂时还没把根(器官)加进去，不过后期会考虑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img3.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img4.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;多边形创建采用了专门处理gis数据的R包sf。&lt;/p&gt;
&lt;p&gt;最后的成品就是前面看到的这个样子了。每一个部分都可以根据自己的需求填上任意的颜色。而且颜色也可以根据需求自己选择，颜色的深浅代表指标的高低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/img5.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/draw-wheat-chart-in-r/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;
也可以给每个部分添加标签，放上对应的数据。这样看起来好是不是好很多。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/draw-wheat-chart-in-r/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;再来一张动图看看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/mygif.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;好吧，最后公布一下那个R包里面的小麦。貌似也没那么难看 😄&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/wheatbygganotom.png&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PCA analysis of reflectance spectra</title>
      <link>/post/2020-12-18-pca-analysis-of-reflectance-spectra/</link>
      <pubDate>Thu, 17 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-12-18-pca-analysis-of-reflectance-spectra/</guid>
      <description>


&lt;p&gt;对于光谱这种高维数据，常常需要通过降维发现其内部的规律。&lt;/p&gt;
&lt;p&gt;首先看下原始光谱。从中仅仅能看出不同波段的变异信息，很难挖掘到更多与样品类别相关的特征。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;于是采用PCA进行降维，观察不同样品的差异。从下面的图中，似乎可以看出样品有成簇分布的可能。但是PCA降维是无法将分类信息展示出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;于是通过层次聚类，发现类别相关的特征。有意思的结果出来了。似乎能根据光谱特征将样品分为不同类别。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;从直觉上看，4个类别似乎还是有可能的。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(dend)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;采用kmeans进行聚类，发现确实4个类别是比较好的。而且还能生成非常漂亮的聚类PCA。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Gap statistic plot
fviz_gap_stat(res.km$gap_stat)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fviz_cluster(res.km, geom = &amp;quot;point&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-pca-analysis-of-reflectance-spectra/index.en_files/figure-html/unnamed-chunk-6-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;至此，光谱降维外加聚类的完整分析流程就结束了。下面就是需要根据样品的生物学特征来做解释了。比如4个类别刚好是质地不同的类型，那么解释起来就更有说服力了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Website collection</title>
      <link>/post/2020-12-18-website-collection/</link>
      <pubDate>Wed, 02 Dec 2020 00:00:00 +0000</pubDate>
      <guid>/post/2020-12-18-website-collection/</guid>
      <description>


&lt;div id=&#34;r-包网站&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;R 包网站&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;cowplot&lt;/code&gt;包，用于组合图形和图片&lt;/p&gt;
&lt;p&gt;链接在此：&lt;a href=&#34;https://wilkelab.org/cowplot/articles/introduction.html&#34; class=&#34;uri&#34;&gt;https://wilkelab.org/cowplot/articles/introduction.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggpubr&lt;/code&gt;包，号称可以生成发表级别的图。简单易用，但是灵活性不足。数据探索可以考虑使用&lt;/p&gt;
&lt;p&gt;链接在此：&lt;a href=&#34;https://rpkgs.datanovia.com/ggpubr/index.html&#34; class=&#34;uri&#34;&gt;https://rpkgs.datanovia.com/ggpubr/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggstatsplot&lt;/code&gt;包, 画出来的图既漂亮还带有统计参数。棒棒棒！！！
&lt;a href=&#34;https://indrajeetpatil.github.io/ggstatsplot/&#34; class=&#34;uri&#34;&gt;https://indrajeetpatil.github.io/ggstatsplot/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sf&lt;/code&gt;包, 画地图的包，兼容性好。做不规则多边形也很好。当年我用轮廓构建的小麦植株就是用这个包做成的。
&lt;a href=&#34;https://r-spatial.github.io/sf/index.html&#34; class=&#34;uri&#34;&gt;https://r-spatial.github.io/sf/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggcor&lt;/code&gt;包，做相关性分析比较强大的包，简化了很多分析的门槛，输出相关性的矩阵也很方便。然而由于某些原因，作者删除了包。&lt;/p&gt;
&lt;p&gt;备份版本可以在gitee上找到：&lt;a href=&#34;https://gitee.com/wellionx/ggcor&#34; class=&#34;uri&#34;&gt;https://gitee.com/wellionx/ggcor&lt;/a&gt;
可以通过devtools安装使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;devtools::install_git(&amp;quot;https://gitee.com/wellionx/ggcor.git&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ggvis&lt;/code&gt;包，可以画出很漂亮图形的R包
&lt;a href=&#34;http://ggvis.rstudio.com/&#34; class=&#34;uri&#34;&gt;http://ggvis.rstudio.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;endextend&lt;/code&gt;包，一个美化和拓展tree的包
&lt;a href=&#34;http://talgalili.github.io/dendextend/articles/dendextend.html&#34; class=&#34;uri&#34;&gt;http://talgalili.github.io/dendextend/articles/dendextend.html&lt;/a&gt;
做聚类分析，用于可视化的包，fviz_dend()函数在展示大型树的时候，加载过于漫长。于是搜索有没有更好的解决方法。终于找到了&lt;code&gt;dendextend&lt;/code&gt;这个包。而且竟然支持管道操作，真真对这个包一见钟情。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echarts4r&lt;/code&gt;包，echarts 4的R版本，能画很多交互的图
&lt;a href=&#34;https://echarts4r.john-coene.com/articles/advanced.html&#34; class=&#34;uri&#34;&gt;https://echarts4r.john-coene.com/articles/advanced.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;del&gt;&lt;code&gt;recharts&lt;/code&gt;包，echarts 2的R版本, 谢益辉开发。&lt;/del&gt;
&lt;del&gt;&lt;a href=&#34;http://madlogos.github.io/recharts/#-en&#34; class=&#34;uri&#34;&gt;http://madlogos.github.io/recharts/#-en&lt;/a&gt;&lt;/del&gt;
最近准备尝试用之前写过的recharts代码画一些图，才发现这个包可用了。原来谢大神早已弃坑，不再更新recharts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;echarter&lt;/code&gt;包，echarts 4的R版本, 最新开发。作者在开发版本的网页中也介绍了之前几个版本的echarts的R接口,都是挂在GitHub上的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cosname/recharts - ECharts4&lt;/li&gt;
&lt;li&gt;JohnCoene/echarts4r - ECharts4&lt;/li&gt;
&lt;li&gt;yihui/recharts - ECharts2&lt;/li&gt;
&lt;li&gt;madlogos/recharts - ECharts2 forked from yihui/recharts&lt;/li&gt;
&lt;li&gt;madlogos/recharts2 - ECharts3&lt;/li&gt;
&lt;li&gt;ChanningWong/REcharts3 - ECharts3&lt;/li&gt;
&lt;li&gt;XD-DENG/ECharts2Shiny - ECharts3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;数据科学&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;数据科学&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;caret&lt;/code&gt;包的使用说明书，包含了很多数据科学的知识，值得深入研究&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&#34;https://topepo.github.io/caret/&#34; class=&#34;uri&#34;&gt;https://topepo.github.io/caret/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于模型评估的内容：&lt;a href=&#34;https://topepo.github.io/caret/measuring-performance.html&#34;&gt;Measuring Performance&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;示例：
&lt;a href=&#34;https://www.yinxiang.com/&#34;&gt;印象笔记官网&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此外，还发现caret包能做&lt;a href=&#34;https://topepo.github.io/caret/recursive-feature-elimination.html&#34;&gt;Recursive Feature Elimination&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;统计学习即机器学习
&lt;a href=&#34;https://daviddalpiaz.github.io/r4sl/index.html&#34;&gt;R for Statistical Learning&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R可视化的网站。介绍了几个主流的R绘图包，并配有例子
&lt;a href=&#34;https://ecodatasci-tlv.github.io/visualizations_in_r/&#34; class=&#34;uri&#34;&gt;https://ecodatasci-tlv.github.io/visualizations_in_r/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;相关性分析可视化，一个比一个漂亮的图
&lt;a href=&#34;https://jamesmarquezportfolio.com/correlation_matrices_in_r.html&#34; class=&#34;uri&#34;&gt;https://jamesmarquezportfolio.com/correlation_matrices_in_r.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Visualize my spectra</title>
      <link>/post/visualize-my-spectra/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/visualize-my-spectra/</guid>
      <description>


&lt;p&gt;从去年开始就一直在分析光谱的数据，刚开始以为R里面会有包能解决我关于光谱的所有问题。经过一段时间的试错之后，我发现自己错了。&lt;/p&gt;
&lt;p&gt;于是记录下来我自己实践的过程。&lt;/p&gt;
&lt;div id=&#34;批量读取光谱数据&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;批量读取光谱数据&lt;/h3&gt;
&lt;p&gt;一般来说，拿到的原始光谱数据数据有这样的特点：&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;strong&gt;光谱反射率和光谱吸收值夹杂在文件内部。&lt;/strong&gt;以SR3501的数据为例，打开之后是这样的(如下图所示)。文件内部有很多关于仪器和配置的信息。真正对我们有价值的数据在27行以后。具体的就是此处的两列数据，第一列为波长，第二列为对应的反射率。所以这就要求读取数据的时候找到指定的行。
&lt;img src=&#34;https://tva3.sinaimg.cn/mw690/6b84e15bgy1ggsq5agy8xj20m80gmmyq.jpg&#34; alt=&#34;SR3501sedfile&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.&lt;strong&gt;数据文件不止一个，常常需要批量读取。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是经过多次试错与总结，写下了下面的方法批量读取指定行的光谱数据。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &amp;#39;&amp;#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,
                     stringsAsFactors = F,row.names = 1)
  spec.t &amp;lt;- as.data.frame(t(spec))
  spec.bdf &amp;lt;- rbind(spec.bdf, spec.t)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据需求，有时候要对数据做一下转置。转置后再把所有的数据bind到一起。&lt;/p&gt;
&lt;p&gt;采用&lt;code&gt;ggplot2&lt;/code&gt;绘图，需要的是长数据，原来两列的数据正好符合要求，只需要添加一列信息即可。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get file names of all spectra
dir = &amp;quot;Spec/&amp;quot;
files = list.files(path = dir ,recursive = TRUE)
# read spectra from AB files
filepath = paste(dir, files, sep = &amp;#39;&amp;#39;)
# define a dataframe to store spectra data
spec.bdf &amp;lt;- data.frame()

for (flp in filepath) {
  
  spec &amp;lt;- read.table(flp, skip = 27, header = F ,stringsAsFactors = F)
  colnames(spec) &amp;lt;- c(&amp;quot;Wavelengths&amp;quot;,&amp;quot;Reflectance&amp;quot;)
  spec$unique_id &amp;lt;- basename(flp)
  spec.df &amp;lt;- rbind(spec.df, spec)
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有了数据就可以展示了，下面是选出来100条光谱进行的展示。&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(cowplot)
load(file = &amp;quot;D:/blogdown/sourceRda/show spectra.rda&amp;quot;)
# Define nice breaks for x axis
brk  &amp;lt;- pretty(as.numeric(unique(spec$Wavelengths)), n = 10)
spec.df$grp &amp;lt;- &amp;quot;A&amp;quot;

ggplot(spec.df, aes(Wavelengths, Reflectance,group = unique_id)) +
  geom_line(aes(color = grp),alpha = 0.7, size = 0.6) +
  scale_x_continuous(breaks = brk) +
  theme_cowplot() +
  scale_color_manual(values = &amp;quot;black&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;) # remove the legend&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-visualize-my-spectra/index.en_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;为了好看，我们还可以给每条光谱加上颜色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-18-visualize-my-spectra/index.en_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;后续更多有意思的分析且听下回分解&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;后续更多有意思的分析，且听下回分解&lt;/h3&gt;
&lt;p&gt;先附上几张图，再留着以后慢慢讲&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/spectra%20organ%20separate.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/Spectra%20and%20PCA.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/wellionx/myimg/raw/master/spectra%20PCA.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
